<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Articles</title>
    <description>안드로이드 앱개발 노트</description>
    <link>
    https://mond-al.github.io</link>
    
      
      <item>
        <title>코틀린의 가시성 정리</title>
        
          <description>&lt;p&gt;코틀린의 public, protected, private 변경자는 컴파일된 바이트 코드 안에서도 그대로 유지됩니다. 그렇게 컴파일된 코틀린의 가시성은 마치 자바에서 똑같은 가시성을 선언한 경우와 동일합니다. 하지만 private는 다르게 적용됩니다. 자바에서 클래스를 private로 만들수 없으므로 내부적으로 코틀린은 private 클래스를 package-private 클래스로 컴파일 합니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 19 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/kotlin-visibility</link>
        <guid isPermaLink="true">https://mond-al.github.io/kotlin-visibility</guid>
      </item>
      
    
      
      <item>
        <title>kotlin collection.associateBy</title>
        
          <description>&lt;p&gt;코틀린에서는 Guava 다른 여타 편라한 기능을 제공하던 라이브러리를 사용하지않고도 충분히 많은 일을 효율적이고 간편하게 해결 할 수 있도록 제공하고있습니다. 귀찮은 문제를 가볍게 해결 해주는 편리한 함수 associateBy, groupBy에 대해 정리해보겠습니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 19 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/kotlin-collection</link>
        <guid isPermaLink="true">https://mond-al.github.io/kotlin-collection</guid>
      </item>
      
    
      
      <item>
        <title>FragmentPagerAdapter, FragmentStatePagerAdapter (생성자 Behavior편)</title>
        
          <description>&lt;p&gt;이름이 워낙 길고, 비슷하기 까지 해서 항상 어떤 녀석을 사용 해야 할지 망설이게 됩니다. 내 앱에서는 딱히 configChanges 나 onPause/onResume에 대한 처리를 딱히 타이트하지 않는데 꼭 “State”가 붙은 것을 사용해야 할지 고민도 되구요. 이 두 클래스에 대해 살펴보겠습니다. 우선 변경된 생성자 이야기부터 시작하겠습니다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 18 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/viewpager-fragment</link>
        <guid isPermaLink="true">https://mond-al.github.io/viewpager-fragment</guid>
      </item>
      
    
      
      <item>
        <title>아키텍처와 클린코드 그리고 TDD (2)</title>
        
          <description>&lt;p&gt;함수 리팩토링을 통해 아름다운 코드로 바꿔보자. 그리고 왜 이렇게 하는지 이해는게 목표이다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 17 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/architecture-base-2</link>
        <guid isPermaLink="true">https://mond-al.github.io/architecture-base-2</guid>
      </item>
      
    
      
      <item>
        <title>아키텍처와 클린코드 그리고 TDD (1)</title>
        
          <description>&lt;p&gt;객체지향에 대해 정리하고, 전체적인 맥락을 짚어본다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 15 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/architecture-base-1</link>
        <guid isPermaLink="true">https://mond-al.github.io/architecture-base-1</guid>
      </item>
      
    
      
      <item>
        <title>카메라 사진촬영으로 보는 Scoped storage 예제 및 소스</title>
        
          <description>&lt;p&gt;Target/Compile Sdk version에 Api level 30을 적용한 아주 간단한 사진촬영 (요청) 앱입니다.  이 앱의 목표는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Android 10(Q)이후 디바이스에 요구되는 &lt;em&gt;Scoped storage&lt;/em&gt;일때 사진 촬영 요청 및 Media Store 등록.&lt;/li&gt;
  &lt;li&gt;안드로이드 앱에서 최소한의 permission으로 어떻게 사진촬영/저장 기능을 제공하는지 보여줍니다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        
        <pubDate>Wed, 10 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/example-camera</link>
        <guid isPermaLink="true">https://mond-al.github.io/example-camera</guid>
      </item>
      
    
      
      <item>
        <title>Binding이 되지않을때 (by viewModels()에 에러)</title>
        
          <description>&lt;p&gt;프로젝트가 세팅되지 않은 상태에서 디펜던시 정의를 빠트린경우인데 new Project를 통해 empty activity 프로젝트로 시작하면 항상 빠트리다 보니 포스팅으로 정리해둡니다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 09 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/about-binding</link>
        <guid isPermaLink="true">https://mond-al.github.io/about-binding</guid>
      </item>
      
    
      
      <item>
        <title>File Provider Path 디렉리터 영역 매칭</title>
        
          <description>&lt;p&gt;Android 7(N)부터는 넘겨받을 파일경로를 전달하기 위해서는 직접 FileProvider를 정의해야 합니다. 얼마전 기존 프로젝트에 Android 11(R) 대응을 위해 Scoped Storage 적용을 진행하면서 기존 external 영역에 생성한 폴더에서 직접 관리하던 파일들을 cache, files, external(Media/Download)로 구분하는 처리가 추가되었습니다. 이로 인해 external경로 이외에도 파일프로바이더로 제공할 수 있도록 수정이 필요했습니다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 08 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/cache-share</link>
        <guid isPermaLink="true">https://mond-al.github.io/cache-share</guid>
      </item>
      
    
      
      <item>
        <title>안드로이드 파일 쓰기</title>
        
          <description>&lt;p&gt;안드로이드 저장소의 형태를 구분하고, 실제 파일을 생성하고 사용하는 방법에 대해 정리하였습니다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 02 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/file-write</link>
        <guid isPermaLink="true">https://mond-al.github.io/file-write</guid>
      </item>
      
    
      
      <item>
        <title>Scoped Storage 적용하기</title>
        
          <description>&lt;p&gt;아마도 Scoped Storage를 강제하는 부분인 Android 11(R)에서 가장 큰 변화인 것 같습니다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 01 Feb 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/scoped-storage</link>
        <guid isPermaLink="true">https://mond-al.github.io/scoped-storage</guid>
      </item>
      
    
      
      <item>
        <title>java.lang.NoSuchMethodError No virtual method log(ILjava/lang/String;Ljava/lang/Throwable</title>
        
          <description>&lt;h3 id=&quot;where-did-the-problem-occur&quot;&gt;Where did the problem occur?&lt;/h3&gt;
&lt;h2 id=&quot;case-a&quot;&gt;case A&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ExceptionInInitializerError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newSslSocketFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;263&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;229&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1015&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        
        <pubDate>Sat, 30 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/error-log-android-11-api-changed</link>
        <guid isPermaLink="true">https://mond-al.github.io/error-log-android-11-api-changed</guid>
      </item>
      
    
      
      <item>
        <title>앱의 의존성 확인하고 전이 의존성 변경하기</title>
        
          <description>&lt;p&gt;의존성과 관련하여 문제가 생겼다고 판단되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;의존성 트리&lt;/code&gt;를 봐야합니다. 터미널에서 프로젝트가 있는 폴더로 이동하고 아래의 명령어를 실행 하면됩니다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 27 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/dependency-gradle</link>
        <guid isPermaLink="true">https://mond-al.github.io/dependency-gradle</guid>
      </item>
      
    
      
      <item>
        <title>ProductFlavors와 BuildType 조합</title>
        
          <description>&lt;p&gt;Gradle에서 ProductFlavors와 BuildType을 이용해서 다양한 형상을 만들 수 있습니다. Gradle을 기반으로 BuildTypes은 기본으로하고 ProductFlavors에 여러가지 dimension을 정의하여 조합하여 빌드를 간편하게 생산 할 수있습니다. 간략한 예를 들어 상황을 정의하고 실제 build.gradle 파일을 수정해 보겠습니다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 26 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/ProductFlavors-BuildType</link>
        <guid isPermaLink="true">https://mond-al.github.io/ProductFlavors-BuildType</guid>
      </item>
      
    
      
      <item>
        <title>테스트용 이미지 (랜덤1000개.zip,해상도별.zip)</title>
        
          <description>&lt;p&gt;테스트용 이미지 파일 형식은 Png이며, &lt;code class=&quot;highlighter-rouge&quot;&gt;image_{number}_{width}x{height}.png&lt;/code&gt; 형식의 파일이름으로 저장 되어 있습니다. 의견 주시면 또 다른 세트도 추가해보겠습니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 22 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/test-image</link>
        <guid isPermaLink="true">https://mond-al.github.io/test-image</guid>
      </item>
      
    
      
      <item>
        <title>개발 테스트용 이미지 다운로드</title>
        
          <description>&lt;p&gt;기능 테스트를 하다 보면 이미지 소스들이 필요한 경우가 있습니다. 때로는 예제앱에 이미지를 포함하고 싶을때 적당한 이미지를 선택하는것도 은근 신경쓰이는 일 입니다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 22 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/test-image-url</link>
        <guid isPermaLink="true">https://mond-al.github.io/test-image-url</guid>
      </item>
      
    
      
      <item>
        <title>Recyclerview Fastscroller Review</title>
        
          <description>&lt;p&gt;&lt;img src=&quot;assets/images/post/2021-01-18-fast-scroller/samsung_fastscroll.gif&quot; alt=&quot;drawing&quot; width=&quot;200&quot; /&gt;&lt;br /&gt;
위 그림처럼 갤러리나 수많은 아이템을 보여줄 때, 순차적으로 스크롤하여 접근하는 대신 스크롤 바를 잡고 바로 이동하는 역활을 하는 것을 FastScroller라고 합니다. FastScroller를 한마디로 이야기하면 “드래그하여 특정한 위치로 이동가능한 스크롤 바”라고 정의 할 수 있습니다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 18 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/fast-scroller</link>
        <guid isPermaLink="true">https://mond-al.github.io/fast-scroller</guid>
      </item>
      
    
      
      <item>
        <title>reboot</title>
        
          <description>&lt;p&gt;다시 시작합니다.
BLOG, MRSK project&lt;/p&gt;

</description>
        
        <pubDate>Tue, 12 Jan 2021 00:00:00 +0900</pubDate>
        <link>
        https://mond-al.github.io/about-reboot</link>
        <guid isPermaLink="true">https://mond-al.github.io/about-reboot</guid>
      </item>
      
    
  </channel>
</rss>
