<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://mond-al.github.io/tag/tdd/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://mond-al.github.io/" rel="alternate" type="text/html" />
  <updated>2021-03-06T03:34:54+09:00</updated>
  <id>https://mond-al.github.io/tag/tdd/feed.xml</id>

  
  
  

  
    <title type="html">몬드의 개발로그 | </title>
  

  
    <subtitle>몬드는 오늘도 개발을 합니다. 내일도...</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Typer - 한글 타이핑 입력효과 라이브러리</title>
      <link href="https://mond-al.github.io/digit-roll-libs" rel="alternate" type="text/html" title="Typer - 한글 타이핑 입력효과 라이브러리" />
      <published>2021-03-04T00:00:00+09:00</published>
      <updated>2021-03-04T00:00:00+09:00</updated>
      <id>https://mond-al.github.io/digit-roll-libs</id>
      <content type="html" xml:base="https://mond-al.github.io/digit-roll-libs">&lt;p&gt;안드로이드에서 회전하는 숫자판 컴포넌트입니다.&lt;/p&gt;

&lt;h1 id=&quot;digit-roll-counter&quot;&gt;digit roll counter&lt;/h1&gt;
&lt;p&gt;자연스럽게 숫자가 회전하다가 마지막에 특정숫자만큼 더해지는 효과를 구현가능합니다. Demo캡쳐는 +1을 수행하게 되어 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;DEMO&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/cover/2021-03-04-digit-roll-libs.gif&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jitpack.io/#mond-al/digit-roll-numbers&quot;&gt;&lt;img src=&quot;https://jitpack.io/v/mond-al/digit-roll-numbers.svg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-1-add-the-jitpack-repository-to-your-build-file&quot;&gt;Step 1. Add the JitPack repository to your build file&lt;/h3&gt;
&lt;p&gt;Add it in your root build.gradle at the end of repositories:&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://jitpack.io'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;step-2-add-the-dependency&quot;&gt;Step 2. Add the dependency&lt;/h3&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.github.mond-al:digit-roll-numbers:0.2'&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step3-just-use-it&quot;&gt;Step3. Just Use it!&lt;/h3&gt;
&lt;p&gt;표시할 숫자, 마지막에 더해질 숫자(default=1) 그리고 콤마 사용 여부(default=false)를 인자로 받습니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;com.al.mond.digitcounter.DigitCounter&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/counter&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DigitCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;github-link&quot;&gt;&lt;a href=&quot;https://github.com/mond-al/digit-roll-numbers&quot;&gt;Github link&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;todo&quot;&gt;Todo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;fix digits&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;comma option&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jisoo Yang</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="android" />
      
        <category term="roll-digit" />
      
        <category term="tdd" />
      

      
        <summary type="html">안드로이드에서 회전하는 숫자판 컴포넌트입니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Typer - 한글 타이핑 입력효과 라이브러리</title>
      <link href="https://mond-al.github.io/hangeul-type-write" rel="alternate" type="text/html" title="Typer - 한글 타이핑 입력효과 라이브러리" />
      <published>2021-03-02T00:00:00+09:00</published>
      <updated>2021-03-02T00:00:00+09:00</updated>
      <id>https://mond-al.github.io/hangeul-type-write</id>
      <content type="html" xml:base="https://mond-al.github.io/hangeul-type-write">&lt;p&gt;안드로이드에서 TextView(또는 상속받는)에 한글을 자소단위로 타이핑하는 효과를 수행하는 라이브러리입니다. (#TypeWriter)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/cover/2021-03-02-hangeul-type-write.gif&quot; alt=&quot;assets/images/cover/2021-03-02-hangeul-type-write.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;** 이 프로젝트는 TDD 테스트작성 연습이 첫 목표였기 때문에 아직 많이 부족한점 참고부탁드립니다. 하지만 하다보니 재미가 있어서 추후 발전시켜볼 예정입니다. :~)&lt;/p&gt;

&lt;h1 id=&quot;typer&quot;&gt;typer&lt;/h1&gt;
&lt;p&gt;안드로이드 TextView(EditText)뷰에 텍스트를 타이핑하는 것처럼 순차적으로 첫가끝(자음모음)입력을 지원합니다.
한글을 &lt;a href=&quot;https://pat.im/1176&quot;&gt;첫가끝&lt;/a&gt;으로 분해하여 타이핑하는 것처럼 입력합니다. 아직은 두벌식을 사용할때 처럼 &lt;a href=&quot;https://namu.wiki/w/%EB%8F%84%EA%B9%A8%EB%B9%84%EB%B6%88%20%ED%98%84%EC%83%81&quot;&gt;도깨비불현상&lt;/a&gt;을 구현하지는 못했습니다.&lt;/p&gt;

&lt;p&gt;첫 배포. 아직은 아주 간단한 수준의 타이핑 효과를 줄수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;DEMO&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/mond-al/typer/blob/main/demo.gif?raw=true&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jitpack.io/#mond-al/typer&quot;&gt;&lt;img src=&quot;https://jitpack.io/v/mond-al/typer.svg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-1-add-it-in-your-root-buildgradle-at-the-end-of-repositories&quot;&gt;Step 1. Add it in your root build.gradle at the end of repositories:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	allprojects {
		repositories {
			...
			maven { url 'https://jitpack.io' }
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;step-2-add-the-dependency&quot;&gt;Step 2. Add the dependency&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dependencies {
	        implementation 'com.github.mond-al:typer:Tag'
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step3-just-use-it&quot;&gt;Step3. Just Use it!&lt;/h3&gt;
&lt;p&gt;타이핑 효과를 줄 View, 문자열, 커서 효과 사용여부, 타이핑 완료시 콜백을 인자로 받습니다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Typer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;타이핑할 문자열&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;타이핑 끝&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;github-link&quot;&gt;&lt;a href=&quot;https://github.com/mond-al/typer&quot;&gt;Github link&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;todo&quot;&gt;Todo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 최적화 및 Stream(Sequence)적용&lt;/li&gt;
  &lt;li&gt;도깨비불현상 구현&lt;/li&gt;
  &lt;li&gt;구간 지우고 다시 쓰기&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jisoo Yang</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="android" />
      
        <category term="type-writer" />
      
        <category term="tdd" />
      

      
        <summary type="html">안드로이드에서 TextView(또는 상속받는)에 한글을 자소단위로 타이핑하는 효과를 수행하는 라이브러리입니다. (#TypeWriter)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">아키텍처와 클린코드 그리고 TDD (3)</title>
      <link href="https://mond-al.github.io/cleancoders-tdd" rel="alternate" type="text/html" title="아키텍처와 클린코드 그리고 TDD (3)" />
      <published>2021-02-25T00:00:00+09:00</published>
      <updated>2021-02-25T00:00:00+09:00</updated>
      <id>https://mond-al.github.io/cleancoders-tdd</id>
      <content type="html" xml:base="https://mond-al.github.io/cleancoders-tdd">&lt;h3 id=&quot;tdd-원칙&quot;&gt;TDD 원칙&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;실패하는 테스트를 작성하기 전에는 절대로 제품 코드를 작성하지 않는다.&lt;/li&gt;
  &lt;li&gt;실패하는 테스트 코드를 한 번에 하나 이상 작성하지 않는다.&lt;/li&gt;
  &lt;li&gt;현재 실패하고 있는 테스트를 성공하기에 충분한 정도를 넘어서는 프로덕션 코드를 작성하지 않는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Start -&amp;gt; write a failing test &amp;lt;-&amp;gt; write code to make it pass (refactoring) -&amp;gt; end&lt;/p&gt;

&lt;p&gt;리팩터링은 옵션이 아니다!&lt;/p&gt;

&lt;h3 id=&quot;원칙과-팁&quot;&gt;원칙과 팁&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;간단하고 쉬운것, 수준이하의 것부터.
    &lt;ul&gt;
      &lt;li&gt;0 + 0… 0 + 1 …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;작은 골프게임.
    &lt;ul&gt;
      &lt;li&gt;최소한의 코드로 돌아 갈 수 있게&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트가 더욱 구체화 될 수록, 프로덕션코드는 범용적이어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tdd-잇점&quot;&gt;TDD 잇점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Debugging Time 이 줄어든다.
    &lt;ul&gt;
      &lt;li&gt;디버그 챔피언이 되고 싶은가? 그건 아니다. 하지만….
        &lt;ul&gt;
          &lt;li&gt;이건 요구되는 스킬이 아니다.&lt;/li&gt;
          &lt;li&gt;디버깅에 시간을 보내길 원치 않는다.&lt;/li&gt;
          &lt;li&gt;코드가 동작하도록 하는데 시간을 사용하기 바란다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TDD가 디버깅 시간을 1/10로 줄여 줄 것이다.
        &lt;ul&gt;
          &lt;li&gt;그런데 1/10 이 아니라, 1/2만 줄여도 의미가 있다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설계문서를 얻게 된다.
    &lt;ul&gt;
      &lt;li&gt;test is “Low level design document.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Decoupling
    &lt;ul&gt;
      &lt;li&gt;테스트를 먼저 작성하면 프로덕션 코드가 테스트 가능해진다.&lt;/li&gt;
      &lt;li&gt;테스트 코드에서 코드라인을 접근하기 쉬운 유일한 방법은 Decouple 시키는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Courage to change
    &lt;ul&gt;
      &lt;li&gt;개발자가 코드를 깨끗하게 리팩토링 하는 것을 두려워하면 코드는 썩는다.&lt;/li&gt;
      &lt;li&gt;테스트가 있어서 시스템이 정상 동작하는지 확인 할 수 있어서 두렵지 않을것이다.
        &lt;ul&gt;
          &lt;li&gt;리그레이션(회귀) 테스트&lt;/li&gt;
          &lt;li&gt;버그가 발견되면 버그를 재현하는 테스트를 추가한다. «&amp;lt; 중요한거 같음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;완벽한 설계에 기반해 개발을 했더라도 테스트가 없다면, 코드를 클린하게 하는데 두려움이 생길것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trust
    &lt;ul&gt;
      &lt;li&gt;TAD(Test After Development)테스트를 신뢰할 수 없다. 항상 구멍이 있을것이라 생각할 것이다.&lt;/li&gt;
      &lt;li&gt;TAD는 지루하다. 이미 수작업으로 트스트 했기때문에 코드가 동작하는 것을 안다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jisoo Yang</name>
        
        
      </author>

      

      
        <category term="android" />
      
        <category term="architecture" />
      
        <category term="cleanCoders" />
      
        <category term="tdd" />
      

      
        <summary type="html">TDD 원칙 실패하는 테스트를 작성하기 전에는 절대로 제품 코드를 작성하지 않는다. 실패하는 테스트 코드를 한 번에 하나 이상 작성하지 않는다. 현재 실패하고 있는 테스트를 성공하기에 충분한 정도를 넘어서는 프로덕션 코드를 작성하지 않는다.</summary>
      

      
      
    </entry>
  
</feed>
